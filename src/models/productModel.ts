import mongoose, { Document, Schema } from "mongoose";

interface ProductDocument extends Document {
  name: string;
  // description: string;
  basePrice: number;
  // category: string;
  // subCategory: string[];
  // imageUrls: string[];
  // isTopRated: boolean;
  // likes: number;
  // dislikes: number;
  // createdAt: Date;
  // updatedAt: Date;
  // tags: string[];
  // relatedProducts: string[];
  // variants: Array<{
  //   size?: string; // Size of the product variant
  //   color?: string; // Color of the product variant
  //   material?: string; // Material of the product variant
  //   quantity: number; // Quantity of the product variant
  //   price: number; // Price of the product variant
  //   stockQuantity: number; // Available stock quantity of the variant
  // }>;

  // sales: {
  //   totalSales: number; // Total number of sales for the product
  //   revenue: number; // Total revenue generated by the product
  //   profitMargin: number; // Profit margin for the product
  // };
  // discountPrice?: number;
  // brand: string;
  // status: string; // Status of the product (e.g., active, discontinued, out of stock)
  // stockQuantity: number;
  // ratings: number; // Field for tracking the average rating
  // reviews: Array<string>; // Array field for storing product reviews
  // specifications: { [key: string]: string };
  // promotions: {
  //   discounts: Array<{ type: string; value: number }>; // Discounts or promotions applicable to the product
  //   coupons: string[]; // Coupons associated with the product
  //   specialOffers: string[]; // Special offers linked to the product
  // };
}

const ProductSchema = new mongoose.Schema<ProductDocument>({
  name: { type: String, required: true },
  // description: { type: String, required: true },
  basePrice: { type: Number, required: true, min: 0 },
  // category: { type: String, required: true },
  // imageUrls: [{ type: String, required: true }],
  // isTopRated: { type: Boolean, default: false },
  // likes: { type: Number, default: 0 },
  // dislikes: { type: Number, default: 0 },
  // createdAt: { type: Date, default: Date.now },
  // updatedAt: { type: Date, default: Date.now },
  // tags: [{ type: String }],
  // relatedProducts: [{ type: Schema.Types.ObjectId, ref: "Product" }],
  // variants: [
  //   {
  //     size: { type: String },
  //     quantity: { type: Number },
  //     color: { type: String },
  //     material: { type: String },
  //     price: { type: Number },
  //     stockQuantity: { type: Number },
  //   },
  // ],

  // sales: {
  //   totalSales: { type: Number, default: 0, min: 0 },
  //   revenue: { type: Number, default: 0, min: 0 },
  //   profitMargin: { type: Number, default: 0, min: 0 },
  // },
  // stockQuantity: { type: Number, required: true }, // Field for available stock quantity
  // discountPrice: { type: Number }, // Optional field for discount price
  // brand: { type: String, required: true },
  // ratings: { type: Number, default: 0 }, // Field for tracking the average rating, defaulting to 0
  // reviews: [{ type: String }], // Array field for storing product reviews
  // specifications: { type: Map, of: String }, // Field for storing product specifications as key-value pairs
  // inventory: {
  //   minStockLevel: { type: Number },
  //   reorderQuantity: { type: Number },
  //   supplier: { type: String },
  // },

  // shipping: {
  //   dimensions: {
  //     length: { type: Number },
  //     width: { type: Number },
  //     height: { type: Number },
  //   },
  //   weight: { type: Number },
  //   shippingClass: { type: String },
  //   restrictions: [{ type: String }],
  // },
  // promotions: {
  //   discounts: [{ type: { type: String }, value: Number }],
  //   coupons: [{ type: String }],
  //   specialOffers: [{ type: String }],
  // },
  // status: {
  //   type: String,
  //   enum: ["active", "discontinued", "out of stock"],
  //   default: "active",
  // },
});

// Convert the 'name' field to lowercase before saving
ProductSchema.pre("save", function (this: ProductDocument, next) {
  this.name = this.name.toLowerCase();
  next();
});

export const Product =
  mongoose.models.Product ||
  mongoose.model<ProductDocument>("Product", ProductSchema);

export default Product;
